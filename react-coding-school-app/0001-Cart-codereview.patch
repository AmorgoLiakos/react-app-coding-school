From b6a40c2bbc372179ee92b7ff7c682b1853be7ca2 Mon Sep 17 00:00:00 2001
From: Hag <enjoy@life-keep.coding>
Date: Sun, 21 Feb 2021 19:45:47 +0200
Subject: [PATCH] Cart codereview

---
 react-coding-school-app/src/App.js            | 128 ++++++++++++++----
 .../src/Components/CartItem/index.js          |  38 ++++--
 .../src/Components/ProductQuantity/index.js   |  11 ++
 3 files changed, 142 insertions(+), 35 deletions(-)
 create mode 100644 react-coding-school-app/src/Components/ProductQuantity/index.js

diff --git a/react-coding-school-app/src/App.js b/react-coding-school-app/src/App.js
index 0f91783..3731999 100644
--- a/react-coding-school-app/src/App.js
+++ b/react-coding-school-app/src/App.js
@@ -1,40 +1,114 @@
-import { useState } from "react"
+import { useState, useEffect } from "react"
 import "./App.css"
 import CartItem from "./Components/CartItem"
 
+/**
+ * It is better to have this as a variable 
+ * so you can decide to either imported from external file/service
+ * or reset back to the original 
+ * */
+
+ const initialState = [
+  {
+    id: 1,
+    title: "cart item one",
+    price: 50,
+    description: "Desc for cart item one"
+  },
+  {
+    id: 2,
+    title: "cart item two",
+    price: 65,
+    description: "Desc for cart item two"
+  },
+  {
+    id: 3,
+    title: "cart item three",
+    price: 45,
+    description: "Desc for cart item three"
+  },
+  {
+    id: 4,
+    title: "cart item four",
+    price: 30,
+    description: "Desc for cart item four"
+  }
+]
+
 function App() {
-  const [CartItems, setCartItems] = useState([
-    {
-      id: 1,
-      title: "cart item one",
-      price: "50",
-      description: "Desc for cart item one"
-    },
-    {
-      id: 2,
-      title: "cart item two",
-      price: "65",
-      description: "Desc for cart item two"
-    },
-    {
-      id: 3,
-      title: "cart item three",
-      price: "45",
-      description: "Desc for cart item three"
-    },
-    {
-      id: 4,
-      title: "cart item four",
-      price: "30",
-      description: "Desc for cart item four"
+  const [CartItems, setCartItems] = useState(initialState)
+  // ‚ö°Ô∏è[Improvement] Lazy initial state 
+  const [cartStatus, setCartStatus] = useState(()=>{
+    let initialObject = {}
+    initialState.forEach(product => {
+      initialObject[product.id]={
+        quantity:1,
+        price:product.price
+      }
+    })
+    return initialObject
+  })
+
+  // we need to store the total price for the items
+  const [totalPrice, setTotalPrice] = useState(0)
+
+  /**
+   * üí£[BUG] Can you spot it?
+   * 
+   */
+
+  useEffect(() => {
+    console.log('%c[Update] App useEffect üîÅ', 'color: aqua');
+
+    let total = 0
+    for (const item in cartStatus) {
+      total += cartStatus[item].quantity * cartStatus[item].price
     }
-  ])
+    setTotalPrice(total)
+   
+  }, [cartStatus]) // I want to monitor changes in the cartStatus and ....
 
+  /**
+   * üí£[BUG] Can you spot it?
+   * 
+   */
   const handleDelete = x => {
     setCartItems(CartItems.filter(item => item.id != x))
   }
 
-  return CartItems.map((x, index) => <CartItem key={CartItems[index].id} title={CartItems[index].title} description={CartItems[index].description} price={CartItems[index].price} handleDelete={() => handleDelete(CartItems[index].id)} />)
+  const handleQuantityChange = ({id, quantity}) => {
+    setCartStatus(prevValue => ({
+      ...prevValue,
+      [id]:{
+        quantity,
+        price:prevValue[id].price
+        }
+    }))
+  }
+
+  //‚ö°Ô∏è[Improvement] 
+  //üí° in the map the first argument is the current object from the array
+  // and the second is the index where the object is located
+  // maybe you can improve the code
+  return (
+    <div>
+    {CartItems.map(
+      (x, index) => 
+      <CartItem 
+        key={CartItems[index].id} 
+        id={CartItems[index].id} 
+        title={CartItems[index].title} 
+        description={CartItems[index].description} 
+        price={CartItems[index].price} 
+        //No need to create here the arrow function just pass it and let the component use it
+        //handleDelete={() => handleDelete(CartItems[index].id)} />
+        handleDelete={handleDelete}
+        handleQuantityChange={handleQuantityChange}
+        cartStatus={cartStatus}
+        />
+        )}
+        <div>Total Price: {totalPrice} </div>
+    </div>)
 }
 
 export default App
diff --git a/react-coding-school-app/src/Components/CartItem/index.js b/react-coding-school-app/src/Components/CartItem/index.js
index 37b0d9a..bb70fbb 100644
--- a/react-coding-school-app/src/Components/CartItem/index.js
+++ b/react-coding-school-app/src/Components/CartItem/index.js
@@ -1,9 +1,25 @@
-import React, { useState } from "react"
+import React, { useState, useEffect } from "react"
+import ProductQuantity from '../ProductQuantity'
 import "./CartItem.css"
 
+// handleQuantityChange={handleQuantityChange}
+// cartStatus={cartStatus}
+// üí° we have learned something about destructuring!
 const CartItem = props => {
   const [quantity, setQuantity] = useState(0)
 
+  /**
+   * ‚ö°Ô∏è[Improvement] check the App.js
+   * We use the effect when we need to make a change
+   * Here we need to trigger a change or an effect when the user
+   * add more items so will use the useEffect, now we need to see when we want this effect to run.
+   * 
+   * We want this to run after we either delete/add a product or we change the quantity of it.
+   * Also we need to have the sum of all other prices + quantities to so the correct total price.
+   * We can try to lift the state and use the lifecycle
+   */
+
+
   const handleMinus = () => {
     setQuantity(quantity - 1)
   }
@@ -24,18 +40,24 @@ const CartItem = props => {
         <h2>{props.price} ‚Ç¨</h2>
       </div>
 
-      <div className="quantity">
-        <button onClick={handleMinus}>-</button>
-        <div id="quantity">{quantity}</div>
-        <button onClick={handlePlus}>+</button>
-      </div>
+      {/** 
+       * You lift the state up and you make the component
+       * to be a presentational only component 
+       * */}
+      <ProductQuantity 
+        handleMinus={props.handleQuantityChange}
+        quantity={quantity} 
+        handlePlus={props.handleQuantityChange}
+        cartStatus={props.cartStatus}
+        id={props.id}
+      />
 
       <div className="total-price">
-        <h3>{quantity * props.price}</h3>
+        <h3>{props.cartStatus[props.id].quantity * props.cartStatus[props.id].price}</h3>
       </div>
 
       <div className="delete-button">
-        <button onClick={props.handleDelete}> X </button>
+        <button onClick={()=> props.handleDelete(props.id)}> X </button>
       </div>
     </div>
   )
diff --git a/react-coding-school-app/src/Components/ProductQuantity/index.js b/react-coding-school-app/src/Components/ProductQuantity/index.js
new file mode 100644
index 0000000..bdba281
--- /dev/null
+++ b/react-coding-school-app/src/Components/ProductQuantity/index.js
@@ -0,0 +1,11 @@
+const ProductQuantity = ({ handleMinus, handlePlus, quantity, cartStatus, id }) => {
+  return (
+    <div className='quantity'>
+      <button onClick={()=>handleMinus({id,quantity:cartStatus[id].quantity-1})}>-</button>
+      <div id='quantity'>{cartStatus[id].quantity}</div>
+      <button onClick={()=>handlePlus({id,quantity:cartStatus[id].quantity+1})}>+</button>
+    </div>
+  );
+};
+
+export default ProductQuantity;
-- 
2.23.0.windows.1

